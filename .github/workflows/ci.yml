name: CI

# Only run when:
#   - PRs are opened against the master branch
#   - the workflow is started from the UI (an optional tag can be passed in via parameter)
#     - If the optional tag parameter is passed in, a new tag will be generated based off the selected branch
on:
  pull_request:
  create:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      tag:
        description: 'The tag to create (optional)'
        required: false

jobs:
  cancel-previous:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
  
  # Run unit tests with code coverage
  unit-tests:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: Run units tests (with coverage)
        uses: docker/build-push-action@v2
        with:
          file: .github/actions/run-tests/Dockerfile.unit-tests

  unit-tests-new:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/v')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v1
      - run: cargo test --no-fail-fast -- --test-threads 8
        env:
          RUSTFLAGS: '-Zinstrument-coverage'
          LLVM_PROFILE_FILE: 'stacks-blockchain-%p-%m.profraw'
      # - uses: actions-rs/cargo@v1
      #   with:
      #     command: test
      #     args: --no-fail-fast
      #   env:
      #     RUSTFLAGS: '-Zinstrument-coverage'
      #     LLVM_PROFILE_FILE: 'stacks-blockchain-%p-%m.profraw'
      # - uses: actions-rs/grcov@v0.1

  # Run integration tests
  integration-tests:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/v')"
    strategy:
      matrix:
        # Uncomment below when Atlas is live
        # test-selector: [ general, atlas, full-genesis ]
        # Delete below when Atlas is live
        test-selector: [ general, full-genesis ]
    steps:
      - name: Run integration tests
        uses: docker/build-push-action@v2
        with:
          file: .github/actions/run-tests/Dockerfile.int-tests-${{ matrix.test-selector }}

  # disable this job/test for now, since we haven't seen this pass
  # on github actions in a while, and the failures can take > 4 hours
  #
  # Run functional tests
  # functional-tests:
  #   if: "!startsWith(github.ref, 'refs/tags/v')"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Run network relay tests
  #       uses: docker/build-push-action@v2
  #       with:
  #         file: .github/actions/run-tests/Dockerfile.functional-tests-net

  # rustfmt checking
  rustfmt:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: Run rustfmt check
        uses: docker/build-push-action@v2
        with:
          file: .github/actions/run-tests/Dockerfile.rustfmt

  # Create distributions
  dist:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ windows-x64, macos-x64, linux-x64, linux-musl-x64, linux-armv7, linux-arm64 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set Vars
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "GITHUB_REF_SHORT=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build distributable
        uses: docker/build-push-action@v2
        with:
          file: build-scripts/Dockerfile.${{ matrix.platform }}
          outputs: dist/${{ matrix.platform }}
          build-args: |
            STACKS_NODE_VERSION=${{ env.GITHUB_REF_SHORT }}
            GIT_BRANCH=${{ env.GITHUB_REF_SHORT }}
            GIT_COMMIT=${{ env.GITHUB_SHA_SHORT }}
          
      - name: Compress artifact
        run: zip --junk-paths ${{ matrix.platform }} ./dist/${{ matrix.platform }}/*

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform }}
          path: ${{ matrix.platform }}.zip

  # Build docker image, tag it with the git tag and `latest` if running on master branch, and publish under the following conditions
  # Will publish if:
  #   - a tag was passed into this workflow
  #   - a tag was pushed up
  #   - this workflow was invoked against a non-master branch (a Docker image tag with the name of the branch will be published)
  build-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set Vars
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "GITHUB_REF_SHORT=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Generate Docker tags & labels
        id: docker_meta
        uses: CharlieC3/ghaction-docker-meta@tag-suffix-prefix
        # uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: blockstack/${{ github.event.repository.name }}
          tag-sha: true
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build/Tag/Push Image
        uses: docker/build-push-action@v2
        with:
          outputs: dist/${{ matrix.platform }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            STACKS_NODE_VERSION=${{ env.GITHUB_REF_SHORT }}
            GIT_BRANCH=${{ env.GITHUB_REF_SHORT }}
            GIT_COMMIT=${{ env.GITHUB_SHA_SHORT }}
          push: github.event_name != 'pull_request'

  # Build docker image, tag it with the git tag and `latest` if running on master branch, and publish under the following conditions
  # Will publish if:
  #   - a tag was passed into this workflow
  #   - a tag was pushed up
  #   - this workflow was invoked against a non-master branch (a Docker image tag with the name of the branch will be published)
  build-publish-stretch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set Vars
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "GITHUB_REF_SHORT=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Generate Docker tags & labels
        id: docker_meta
        uses: CharlieC3/ghaction-docker-meta@tag-suffix-prefix
        # uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: blockstack/${{ github.event.repository.name }}
          tag-sha: true
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
          tag-suffix: -stretch

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build/Tag/Push Image
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile.stretch
          outputs: dist/${{ matrix.platform }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            STACKS_NODE_VERSION=${{ env.GITHUB_REF_SHORT }}
            GIT_BRANCH=${{ env.GITHUB_REF_SHORT }}
            GIT_COMMIT=${{ env.GITHUB_SHA_SHORT }}
          push: github.event_name != 'pull_request'

  # Create a new release if we're building a tag
  create-release:
    runs-on: ubuntu-latest
    if: contains(github.ref, 'master')
    needs:
      - unit-tests
      - integration-tests
      # - functional-tests
      - rustfmt
      - dist
      - build-publish
      - build-publish-stretch

    steps:
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.event.repository.name }}
        with:
          # These plugins aren't packaged with semantic-release by default. So specify them here to ensure they get installed during this GH Action
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git

  # Upload distributables to a new release if we're building a tag or a tag was passed in
  upload-dist:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - dist
    strategy:
      matrix:
        platform: [ windows-x64, macos-x64, linux-x64, linux-musl-x64, linux-armv7, linux-arm64 ]

    steps:
      - name: Download distro
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.platform }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ github.token }}
          file: ${{ matrix.platform }}.zip
          asset_name: ${{ matrix.platform }}.zip
          tag: ${{ github.ref }}
          overwrite: true
